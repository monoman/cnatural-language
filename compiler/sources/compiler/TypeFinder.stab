/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
using java.lang;
using java.util;
using stab.query;
using stab.reflection;
using stab.tools.helpers;

package stab.tools.compiler {

    public class TypeFinder {
        private Node root;
        
        public TypeFinder(Library typeSystem) {
            this.TypeSystem = typeSystem;
            this.root = new Node();
            initialize();
        }

        public Library TypeSystem {
            get;
            private set;
        }
        
        public boolean packageExists(Iterable<String> packages) {
            Node n = root;
            foreach (var p in packages) {
                n = n.children[p];
                if (n == null) {
                    return false;
                }
            }
            return true;
        }

        public Set<String> getClasses(Iterable<String> packages) {
            var n = root;
            foreach (var p in packages) {
                n = n.children[p];
                if (n == null) {
                    return Collections.emptySet();
                }
            }
            return n.classes;
        }

        public Set<String> getClasses(String packageName) {
            int idx;
            var n = root;
            if (!Helper.isNullOrEmpty(packageName)) {
                while (n != null && (idx = packageName.indexOf('/')) > 0) {
                    var pkg = packageName.substring(0, idx);
                    packageName = packageName.substring(idx + 1);
                    n = n.children[pkg];
                }
                if (n == null) {
                    return Collections.emptySet();
                }
                n = n.children[packageName];
                if (n == null) {
                    return Collections.emptySet();
                }
            }
            return n.classes;
        }

        public Iterable<String> getSubPackages(Iterable<String> packages) {
            var n = root;
            foreach (var p in packages) {
                n = n.children[p];
                if (n == null) {
                    return Query.empty();
                }
            }
            return n.children.keySet();
        }

        public Iterable<String> getSubPackages(String packageName) {
            int idx;
            var n = root;
            if (!Helper.isNullOrEmpty(packageName)) {
                while (n != null && (idx = packageName.indexOf('/')) > 0) {
                    var pkg = packageName.substring(0, idx);
                    packageName = packageName.substring(idx + 1);
                    n = n.children[pkg];
                }
                if (n == null) {
                    return Query.empty();
                }
                n = n.children[packageName];
                if (n == null) {
                    return Query.empty();
                }
            }
            return n.children.keySet();
        }

        private void initialize() {
            foreach (var c in this.TypeSystem.AllClassNames) {
                if (c.lastIndexOf('$') > 0) {
                    continue;
                }
                initializeNode(root, c);
            }
        }

        private static void initializeNode(Node n, String c) {
            for (;;) {
                int idx = c.indexOf('/');
                if (idx < 0) {
                    n.classes.add(c);
                    break;
                } else {
                    var pkg = c.substring(0, idx);
                    var cn = n.children[pkg];
                    if (cn == null) {
                        cn = new Node();
                        n.children[pkg] = cn;
                    }
                    n = cn;
                    c = c.substring(idx + 1);
                }
            }
        }
        
        private class Node {
            HashMap<String, Node> children = new HashMap<String, Node>();
            HashSet<String> classes = new HashSet<String>();
        }
    }
}