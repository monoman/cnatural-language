/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
using java.util;

namespace stab.tools.syntaxtree {

	public class QueryExpressionNode : ExpressionNode {
		public QueryExpressionNode()
			: super(ExpressionKind.Query) {
			this.From = new FromQueryBodyClauseNode();
			this.Body = new QueryBodyNode();
		}
		
		property FromQueryBodyClauseNode From^;
		
		property QueryBodyNode Body^;
	}
	
	public enum QueryBodyClauseKind {
		From,
		Join,
		Let,
		Orderby,
		Where
	}
	
	public abstract class QueryBodyClauseNode : SyntaxNode {
		protected QueryBodyClauseNode(QueryBodyClauseKind queryBodyClauseKind) {
			this.QueryBodyClauseKind = queryBodyClauseKind;
		}
	
		property QueryBodyClauseKind QueryBodyClauseKind^;
	}
	
	public class FromQueryBodyClauseNode : QueryBodyClauseNode {
		public FromQueryBodyClauseNode()
			: super(QueryBodyClauseKind.From) {
		}
		
		property TypeReferenceNode Type;
		
		property ExpressionNode Origin;
		
		property int NameOffset;
		
		property int NameLength;
	}

	public class JoinQueryBodyClauseNode : QueryBodyClauseNode {
		public JoinQueryBodyClauseNode()
			: super(QueryBodyClauseKind.Join) {
		}
		
		property TypeReferenceNode Type;
		
		property int NameOffset;
		
		property int NameLength;
		
		property ExpressionNode Origin;
		
		property ExpressionNode EqualsLeftOperand;
		
		property ExpressionNode EqualsRightOperand;
		
		property int ResultOffset;
		
		property int ResultLength;
	}
	
	public class LetQueryBodyClauseNode : QueryBodyClauseNode {
		public LetQueryBodyClauseNode()
			: super(QueryBodyClauseKind.Let) {
		}
		
		property int NameOffset;
		
		property int NameLength;
		
		property ExpressionNode Value;
	}
	
	public class OrderbyQueryBodyClauseNode : QueryBodyClauseNode {
		public OrderbyQueryBodyClauseNode()
			: super(QueryBodyClauseKind.Orderby) {
			this.Orderings = new ArrayList<OrderingNode>();
		}
		
		property List<OrderingNode> Orderings^;
	}

	public class OrderingNode : SyntaxNode {
		public OrderingNode() {
		}
		
		property boolean Descending;
		
		property ExpressionNode KeySelector;
	}
	
	public class WhereQueryBodyClauseNode : QueryBodyClauseNode {
		public WhereQueryBodyClauseNode()
			: super(QueryBodyClauseKind.Where) {
		}
		
		property ExpressionNode Predicat;
	}
	
	public class QueryBodyNode : SyntaxNode {
		public QueryBodyNode() {
			this.Clauses = new ArrayList<QueryBodyClauseNode>();
		}
		
		property ExpressionNode SelectOrGroup;
		
		property ExpressionNode By;
		
		property QueryContinuationNode Continuation;
		
		property List<QueryBodyClauseNode> Clauses;
	}
	
	public class QueryContinuationNode : SyntaxNode {
		public QueryContinuationNode() {
			this.Body = new QueryBodyNode();
		}
		
		property int NameOffset;
		
		property int NameLength;
		
		property QueryBodyNode Body^;
	}
}
