/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
using java.util;
using org.eclipse.core.resources;
using org.eclipse.core.runtime;
using org.eclipse.swt;
using org.eclipse.swt.layout;
using org.eclipse.swt.widgets;
using org.eclipse.ui.dialogs;

package stab.tools.eclipse.preferences {

	//
	// The project property page to customize the build.
	//
	public class BuildSettingsPropertyPage : PropertyPage {

		public BuildSettingsPropertyPage() {
			this.LibrariesWorkingCopy = new ArrayList<ProjectLibrary>();
		}
		
		IProject getProject() {
	        IAdaptable adaptable = getElement();
			return adaptable == null ? null : (IProject)adaptable.getAdapter(typeof(IProject));
		}
		
		ArrayList<ProjectLibrary> LibrariesWorkingCopy {
			get;
			private set;
		}
		
		protected override Control createContents(Composite parent) {
			noDefaultAndApplyButton();
			var project = getProject();
			Control result = null;
			if (project != null && project.isOpen()) {
				var composite = new Composite(parent, SWT.NONE);
				composite.setFont(parent.getFont());
				
				var layout = new GridLayout();
				layout.marginWidth = 0;
				layout.marginHeight = 0;
				layout.numColumns = 1;
				composite.setLayout(layout);
	
				var folder = new TabFolder(composite, SWT.NONE);
				folder.setLayoutData(new GridData(GridData.FILL_BOTH));
				folder.setFont(composite.getFont());
	
				var item = new TabItem(folder, SWT.NONE);
				item.setText(Messages.librariesTabItemText);
				item.setImage(Environment.getIcon(Icon.Library));
				item.setControl(getLibrariesTabItemControl(folder));
	
				org.eclipse.jface.dialogs.Dialog.applyDialogFont(result = composite);
			}
			return result;
		}
		
		private Control getLibrariesTabItemControl(Composite parent) {
			var projectManager = Environment.getProjectManager(getProject());
			foreach (var lib in projectManager.Properties.Libraries) {
				var libCopy = new ProjectLibrary(lib.getPath());
				libCopy.setEnabled(lib.Enabled);
				LibrariesWorkingCopy.add(libCopy);
			}
			return new LibrariesPreferences(this).createControl(parent);
		}
		
		public override boolean performOk() {
			var update = false;
			var projectManager = Environment.getProjectManager(getProject());
			var properties = projectManager.Properties;
			var it1 = properties.Libraries.iterator();
			var it2 = LibrariesWorkingCopy.iterator();
			var changed = false;
			while (it1.hasNext() && it2.hasNext()) {
				var lib1 = it1.next();
				var lib2 = it2.next();
				if (!lib1.Path.equals(lib2.Path) || lib1.Enabled != lib2.Enabled) {
					changed = true;
				}
			}
			if (it1.hasNext() || it2.hasNext()) {
				changed = true;
			}
			if (changed) {
				properties.Libraries = LibrariesWorkingCopy;
				update = true;
			}
			if (update) {
				projectManager.propertiesUpdated();
			}
			return true;
		}
	}
}
